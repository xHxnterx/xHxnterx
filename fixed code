import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import TimeSeriesSplit
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Load data
data = pd.read_csv('https://raw.githubusercontent.com/xHxnterx/xHxnterx/main/test')
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Feature engineering
data['Year'] = data.index.year
data['Month'] = data.index.month
data['Day'] = data.index.day

# Creating lag features
for i in range(1, 3):
    data[f'Close_Lag_{i}'] = data['Close'].shift(i)

# Drop NaN values resulting from the lag
data = data.dropna()

# Split the data into training and testing sets
train_size = int(len(data) * 0.8)
train, test = data.iloc[:train_size], data.iloc[train_size:]

# Define features and target variable
features = data.columns.difference(['Close'])
X_train, y_train = train[features], train['Close']
X_test, y_test = test[features], test['Close']

# Standardize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Reshape features for LSTM input
X_train_reshaped = X_train_scaled.reshape((X_train_scaled.shape[0], 1, X_train_scaled.shape[1]))
X_test_reshaped = X_test_scaled.reshape((X_test_scaled.shape[0], 1, X_test_scaled.shape[1]))

# Build LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(1, X_train_scaled.shape[1])))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X_train_reshaped, y_train, epochs=100, batch_size=32, verbose=2)

# Make predictions on the validation set
predictions = model.predict(X_test_reshaped)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Plotting the results
plt.figure(figsize=(20,10))
plt.plot(test.index, y_test, label='Actual Close Price', color='blue')
plt.plot(test.index, predictions, label='Predicted Close Price', color='red')
plt.title('NVIDIA Stock Price Prediction (LSTM)')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
