import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import LSTM, Dense
from keras.callbacks import EarlyStopping

# Function for data preprocessing
def preprocess_data(data):
    data['Year'] = data.index.year
    data['Month'] = data.index.month
    data['Day'] = data.index.day

    for i in range(1, 3):
        data[f'Close_Lag_{i}'] = data['Close'].shift(i)

    data = data.dropna()

    features = data.columns.difference(['Close'])
    X, y = data[features], data['Close']

    # Use MinMaxScaler for normalization
    scaler = MinMaxScaler()
    X_scaled = scaler.fit_transform(X)

    return train_test_split(X_scaled, y, test_size=0.6, shuffle=False)

# Load data
data = pd.read_csv('https://raw.githubusercontent.com/xHxnterx/xHxnterx/main/Nvidadata')
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Data preprocessing
X_train, X_test, y_train, y_test = preprocess_data(data)

# Reshape features for LSTM input
X_train_reshaped = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
X_test_reshaped = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))

# Build LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(1, X_train.shape[1]), return_sequences=True))
model.add(LSTM(50, activation='relu'))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# Early stopping
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# Train the model
history = model.fit(X_train_reshaped, y_train, epochs=100, batch_size=64, verbose=2, validation_split=0.1, callbacks=[early_stopping])

# Make predictions on the test set
predictions = model.predict(X_test_reshaped)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Plotting the results
plt.figure(figsize=(20, 10))
plt.plot(data.index[-len(y_test):], y_test, label='Actual Close Price', color='blue')
plt.plot(data.index[-len(predictions):], predictions, label='Predicted Close Price', color='red')
plt.title('Nvidia Stock Price Prediction (LSTM)')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
