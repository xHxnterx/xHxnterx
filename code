import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import TimeSeriesSplit


# Assuming you have a CSV file with NVIDIA stock data, load it into a DataFrame
data = pd.read_csv('https://raw.githubusercontent.com/xHxnterx/xHxnterx/main/test')
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Feature engineering: You may need to add more features based on your data
data['Year'] = data.index.year
data['Month'] = data.index.month
data['Day'] = data.index.day

# Creating lag features
for i in range(1, 6):
    data[f'Close_Lag_{i}'] = data['Close'].shift(i)

# Drop NaN values resulting from the lag
data = data.dropna()

# Split the data into training and testing sets
train_size = int(len(data) * 0.99)
train, test = data.iloc[:train_size], data.iloc[train_size:]

# Define features and target variable
features = data.columns.difference(['Close'])
X_train, y_train = train[features], train['Close']
X_test, y_test = test[features], test['Close']

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
tscv = TimeSeriesSplit(n_splits=10)
# Train a RandomForestRegressor model
model = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.1, max_depth=5, random_state=1)
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Plotting the results
plt.figure(figsize=(10, 6))
plt.plot(test.index, y_test, label='Actual Close Price', color='blue')
plt.plot(test.index, predictions, label='Predicted Close Price', color='red')
plt.title('NVIDIA Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
